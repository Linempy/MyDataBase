//
// Created by mazin on 10.03.2025.
//

#ifndef DATABASE_SORTEDBYFIELD_H
#define DATABASE_SORTEDBYFIELD_H

#include <string.h>
#include "../database/productList.h"



/** Перечисление для выбора соответствующего поля для сортировки
 * */
typedef enum {
    FIELD_ID,
    FIELD_NAME,
    FIELD_DESCRIPTION,
    FIELD_PRICE,
    FIELD_AMOUNT,
    FIELD_CATEGORY_ID,
    NUM_FIELDS
} FieldType;

/**
 * @brief Структура-обертка для функции сравнения.
 *
 * Используется для передачи функции сравнения и дополнительного параметра (например, порядка сортировки).
 * */
typedef struct {
    int (*comparator)(const void*, const void*, int);
    int order;
} ComparatorWrapper;


/** @brief Функция сравнения целых чисел. Сравнение по значениям поля id
 * @param a - указатель на первое значение
 * @param b - указатель на второе значение
 * @param order - порядок сортировки (1 для возрастания, -1 для убывания)
 * @return 1: Результат сравнения;
 * */
int compareId(const void* a, const void* b, int order);


/** @brief Функция сравнения вещественных чисел. Сравнение по значениям поля price
 * @param a - указатель на первое значение
 * @param b - указатель на второе значение
 * @param order - порядок сортировки (1 для возрастания, -1 для убывания)
 * @return Результат сравнения:
 * - Отрицательное число, если первое число меньше второго.
 * - Ноль, если числа равны.
 * - Положительное число, если первое число больше второго.;;
 * */
int comparePrice(const void* a, const void* b, int order);


/** @brief Функция сравнения вещественных чисел. Сравнение по значениям поля amount
 * @param a - указатель на первое значение
 * @param b - указатель на второе значение
 * @param order - порядок сортировки (1 для возрастания, -1 для убывания)
 * @return Результат сравнения:
 * - Отрицательное число, если первое число меньше второго.
 * - Ноль, если числа равны.
 * - Положительное число, если первое число больше второго.;;
 * */
int compareAmount(const void* a, const void* b, int order);


/** @brief Функция сравнения строк. Сравнение по значениям поля name
 * @param a - указатель на первое значение
 * @param b - указатель на второе значение
 * @param order - порядок сортировки (1 для возрастания, -1 для убывания)
 * @return Результат сравнения:
 * - Отрицательное число, если первое число меньше второго.
 * - Ноль, если числа равны.
 * - Положительное число, если первое число больше второго.;
 * */
int compareName(const void* a, const void* b, int order);


/** @brief Функция сравнения строк. Сравнение по значениям поля description
 * @param a - указатель на первое значение
 * @param b - указатель на второе значение
 * @param order - порядок сортировки (1 для возрастания, -1 для убывания)
 * @return Результат сравнения:
 * - Отрицательное число, если первая строка меньше второй.
 * - Ноль, если строки равны.
 * - Положительное число, если первая строка больше второй.;
 * */
int compareDescription(const void* a, const void* b, int order);

/** @brief Функция сравнения целых чисел. Сравнение по значениям поля category_id
 * @param a - указатель на первое значение
 * @param b - указатель на второе значение
 * @param order - порядок сортировки (1: по возрастанию, -1: по убыванию)
 * @return Результат сравнения:
 * - Отрицательное число, если первая строка меньше второй.
 * - Ноль, если строки равны.
 * - Положительное число, если первая строка больше второй.;
 * */
int compareCategoryId(const void* a, const void* b, int order);


/**
 * @brief Массив указателей на функции сравнения.
 *
 * Каждая функция в массиве принимает два элемента для сравнения и дополнительный параметр (order).
 * Используется для гибкого выбора функции сравнения в зависимости от контекста.
 *
 * @note Функции сравнения должны соответствовать сигнатуре:
 *   int (*)(const void* a, const void* b, int order)
 *
 * @param a Указатель на первый элемент.
 * @param b Указатель на второй элемент.
 * @param order Дополнительный параметр (например, порядок сортировки):
 *   - 1: сортировка по возрастанию.
 *   - -1: сортировка по убыванию.
 * @return Результат сравнения:
 *   - Отрицательное число, если первый элемент меньше второго.
 *   - Ноль, если элементы равны.
 *   - Положительное число, если первый элемент больше второго.
 **/
extern int (*comparators[])(const void*, const void*, int);


/**
 * @brief Разделение массива относительно опорного элемента.
 *
 * @param base Указатель на массив.
 * @param low Начальный индекс диапазона.
 * @param high Конечный индекс диапазона.
 * @param size Размер одного элемента массива.
 * @param comparator Функция сравнения.
 * @param context Дополнительный контекст для функции сравнения.
 * @return Индекс опорного элемента после разделения.
 **/
size_t partition(void* base, size_t low, size_t high, size_t size,
                 int (*comparator)(const void*, const void*, void*), void* context);


/**
 * @brief Реализация быстрой сортировки.
 *
 * @param base Указатель на массив.
 * @param low Начальный индекс диапазона.
 * @param high Конечный индекс диапазона.
 * @param size Размер одного элемента массива.
 * @param comparator Функция сравнения.
 * @param context Дополнительный контекст для функции сравнения.
 */
void quickSort(void* base, size_t low, size_t high, size_t size,
               int (*comparator)(const void*, const void*, void*), void* context);


/**
 * @brief Удобный интерфейс для быстрой сортировки.
 *
 * @param base Указатель на массив.
 * @param nmemb Количество элементов в массиве.
 * @param size Размер одного элемента массива.
 * @param comparator Функция сравнения.
 * @param order Порядок сортировки (1 для возрастания, -1 для убывания).
 */
void myQsort(void* base, size_t nmemb, size_t size, int (*comparator)(const void*, const void*, int), int order);

#endif //DATABASE_SORTEDBYFIELD_H
